/*
 * This file is generated by jOOQ.
 */
package com.julianduru.oauthservice.jooq.tables;


import com.julianduru.oauthservice.jooq.Keys;
import com.julianduru.oauthservice.jooq.OauthService;
import com.julianduru.oauthservice.jooq.tables.records.UserDataRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserData extends TableImpl<UserDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_service.user_data</code>
     */
    public static final UserData USER_DATA = new UserData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDataRecord> getRecordType() {
        return UserDataRecord.class;
    }

    /**
     * The column <code>oauth_service.user_data.id</code>.
     */
    public final TableField<UserDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oauth_service.user_data.auth_role_id</code>.
     */
    public final TableField<UserDataRecord, String> AUTH_ROLE_ID = createField(DSL.name("auth_role_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>oauth_service.user_data.auth_username</code>.
     */
    public final TableField<UserDataRecord, String> AUTH_USERNAME = createField(DSL.name("auth_username"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>oauth_service.user_data.time_added</code>.
     */
    public final TableField<UserDataRecord, String> TIME_ADDED = createField(DSL.name("time_added"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>oauth_service.user_data.time_updated</code>.
     */
    public final TableField<UserDataRecord, String> TIME_UPDATED = createField(DSL.name("time_updated"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>oauth_service.user_data.additional_info</code>.
     */
    public final TableField<UserDataRecord, String> ADDITIONAL_INFO = createField(DSL.name("additional_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>oauth_service.user_data.email</code>.
     */
    public final TableField<UserDataRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>oauth_service.user_data.name</code>.
     */
    public final TableField<UserDataRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>oauth_service.user_data.password</code>.
     */
    public final TableField<UserDataRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>oauth_service.user_data.username</code>.
     */
    public final TableField<UserDataRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>oauth_service.user_data.authorities</code>.
     */
    public final TableField<UserDataRecord, String> AUTHORITIES = createField(DSL.name("authorities"), SQLDataType.CLOB, this, "");

    private UserData(Name alias, Table<UserDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserData(Name alias, Table<UserDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oauth_service.user_data</code> table reference
     */
    public UserData(String alias) {
        this(DSL.name(alias), USER_DATA);
    }

    /**
     * Create an aliased <code>oauth_service.user_data</code> table reference
     */
    public UserData(Name alias) {
        this(alias, USER_DATA);
    }

    /**
     * Create a <code>oauth_service.user_data</code> table reference
     */
    public UserData() {
        this(DSL.name("user_data"), null);
    }

    public <O extends Record> UserData(Table<O> child, ForeignKey<O, UserDataRecord> key) {
        super(child, key, USER_DATA);
    }

    @Override
    public Schema getSchema() {
        return OauthService.OAUTH_SERVICE;
    }

    @Override
    public Identity<UserDataRecord, Long> getIdentity() {
        return (Identity<UserDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserDataRecord> getPrimaryKey() {
        return Keys.KEY_USER_DATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserDataRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDataRecord>>asList(Keys.KEY_USER_DATA_PRIMARY, Keys.KEY_USER_DATA_UC_USER_DATAEMAIL_COL, Keys.KEY_USER_DATA_UC_USER_DATAUSERNAME_COL);
    }

    @Override
    public UserData as(String alias) {
        return new UserData(DSL.name(alias), this);
    }

    @Override
    public UserData as(Name alias) {
        return new UserData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(String name) {
        return new UserData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(Name name) {
        return new UserData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
