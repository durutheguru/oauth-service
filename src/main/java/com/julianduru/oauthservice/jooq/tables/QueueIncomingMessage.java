/*
 * This file is generated by jOOQ.
 */
package com.julianduru.oauthservice.jooq.tables;


import com.julianduru.oauthservice.jooq.Keys;
import com.julianduru.oauthservice.jooq.OauthService;
import com.julianduru.oauthservice.jooq.tables.records.QueueIncomingMessageRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueueIncomingMessage extends TableImpl<QueueIncomingMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_service.queue_incoming_message</code>
     */
    public static final QueueIncomingMessage QUEUE_INCOMING_MESSAGE = new QueueIncomingMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueueIncomingMessageRecord> getRecordType() {
        return QueueIncomingMessageRecord.class;
    }

    /**
     * The column <code>oauth_service.queue_incoming_message.id</code>.
     */
    public final TableField<QueueIncomingMessageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.header</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.payload</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.processing_status</code>.
     */
    public final TableField<QueueIncomingMessageRecord, Integer> PROCESSING_STATUS = createField(DSL.name("processing_status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.processing_status_message</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> PROCESSING_STATUS_MESSAGE = createField(DSL.name("processing_status_message"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.reference</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.status</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.topic</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.treat_immediately</code>.
     */
    public final TableField<QueueIncomingMessageRecord, Boolean> TREAT_IMMEDIATELY = createField(DSL.name("treat_immediately"), SQLDataType.BIT, this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.time_added</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> TIME_ADDED = createField(DSL.name("time_added"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>oauth_service.queue_incoming_message.time_updated</code>.
     */
    public final TableField<QueueIncomingMessageRecord, String> TIME_UPDATED = createField(DSL.name("time_updated"), SQLDataType.VARCHAR(255), this, "");

    private QueueIncomingMessage(Name alias, Table<QueueIncomingMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private QueueIncomingMessage(Name alias, Table<QueueIncomingMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oauth_service.queue_incoming_message</code> table reference
     */
    public QueueIncomingMessage(String alias) {
        this(DSL.name(alias), QUEUE_INCOMING_MESSAGE);
    }

    /**
     * Create an aliased <code>oauth_service.queue_incoming_message</code> table reference
     */
    public QueueIncomingMessage(Name alias) {
        this(alias, QUEUE_INCOMING_MESSAGE);
    }

    /**
     * Create a <code>oauth_service.queue_incoming_message</code> table reference
     */
    public QueueIncomingMessage() {
        this(DSL.name("queue_incoming_message"), null);
    }

    public <O extends Record> QueueIncomingMessage(Table<O> child, ForeignKey<O, QueueIncomingMessageRecord> key) {
        super(child, key, QUEUE_INCOMING_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return OauthService.OAUTH_SERVICE;
    }

    @Override
    public Identity<QueueIncomingMessageRecord, Long> getIdentity() {
        return (Identity<QueueIncomingMessageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QueueIncomingMessageRecord> getPrimaryKey() {
        return Keys.KEY_QUEUE_INCOMING_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<QueueIncomingMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<QueueIncomingMessageRecord>>asList(Keys.KEY_QUEUE_INCOMING_MESSAGE_PRIMARY, Keys.KEY_QUEUE_INCOMING_MESSAGE_UC_QUEUE_INCOMING_MESSAGEREFERENCE_COL);
    }

    @Override
    public QueueIncomingMessage as(String alias) {
        return new QueueIncomingMessage(DSL.name(alias), this);
    }

    @Override
    public QueueIncomingMessage as(Name alias) {
        return new QueueIncomingMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueIncomingMessage rename(String name) {
        return new QueueIncomingMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueIncomingMessage rename(Name name) {
        return new QueueIncomingMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Integer, String, String, String, String, Boolean, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
