/*
 * This file is generated by jOOQ.
 */
package com.julianduru.oauthservice.jooq.tables;


import com.julianduru.oauthservice.jooq.Keys;
import com.julianduru.oauthservice.jooq.OauthService;
import com.julianduru.oauthservice.jooq.tables.records.ResourceServerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceServer extends TableImpl<ResourceServerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_service.resource_server</code>
     */
    public static final ResourceServer RESOURCE_SERVER = new ResourceServer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceServerRecord> getRecordType() {
        return ResourceServerRecord.class;
    }

    /**
     * The column <code>oauth_service.resource_server.id</code>.
     */
    public final TableField<ResourceServerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oauth_service.resource_server.auth_role_id</code>.
     */
    public final TableField<ResourceServerRecord, String> AUTH_ROLE_ID = createField(DSL.name("auth_role_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>oauth_service.resource_server.auth_username</code>.
     */
    public final TableField<ResourceServerRecord, String> AUTH_USERNAME = createField(DSL.name("auth_username"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>oauth_service.resource_server.time_added</code>.
     */
    public final TableField<ResourceServerRecord, String> TIME_ADDED = createField(DSL.name("time_added"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>oauth_service.resource_server.time_updated</code>.
     */
    public final TableField<ResourceServerRecord, String> TIME_UPDATED = createField(DSL.name("time_updated"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>oauth_service.resource_server.resource_server_id</code>.
     */
    public final TableField<ResourceServerRecord, String> RESOURCE_SERVER_ID = createField(DSL.name("resource_server_id"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>oauth_service.resource_server.status</code>.
     */
    public final TableField<ResourceServerRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private ResourceServer(Name alias, Table<ResourceServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceServer(Name alias, Table<ResourceServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oauth_service.resource_server</code> table reference
     */
    public ResourceServer(String alias) {
        this(DSL.name(alias), RESOURCE_SERVER);
    }

    /**
     * Create an aliased <code>oauth_service.resource_server</code> table reference
     */
    public ResourceServer(Name alias) {
        this(alias, RESOURCE_SERVER);
    }

    /**
     * Create a <code>oauth_service.resource_server</code> table reference
     */
    public ResourceServer() {
        this(DSL.name("resource_server"), null);
    }

    public <O extends Record> ResourceServer(Table<O> child, ForeignKey<O, ResourceServerRecord> key) {
        super(child, key, RESOURCE_SERVER);
    }

    @Override
    public Schema getSchema() {
        return OauthService.OAUTH_SERVICE;
    }

    @Override
    public Identity<ResourceServerRecord, Long> getIdentity() {
        return (Identity<ResourceServerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResourceServerRecord> getPrimaryKey() {
        return Keys.KEY_RESOURCE_SERVER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ResourceServerRecord>> getKeys() {
        return Arrays.<UniqueKey<ResourceServerRecord>>asList(Keys.KEY_RESOURCE_SERVER_PRIMARY, Keys.KEY_RESOURCE_SERVER_UC_RESOURCE_SERVERRESOURCE_SERVER_ID_COL);
    }

    @Override
    public ResourceServer as(String alias) {
        return new ResourceServer(DSL.name(alias), this);
    }

    @Override
    public ResourceServer as(Name alias) {
        return new ResourceServer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServer rename(String name) {
        return new ResourceServer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServer rename(Name name) {
        return new ResourceServer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
