/*
 * This file is generated by jOOQ.
 */
package com.julianduru.oauthservice.jooq.tables.records;


import com.julianduru.oauthservice.jooq.tables.Oauth2Authorization;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2AuthorizationRecord extends UpdatableRecordImpl<Oauth2AuthorizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oauth_service.oauth2_authorization.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.registered_client_id</code>.
     */
    public void setRegisteredClientId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.registered_client_id</code>.
     */
    public String getRegisteredClientId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.principal_name</code>.
     */
    public void setPrincipalName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.principal_name</code>.
     */
    public String getPrincipalName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.authorization_grant_type</code>.
     */
    public void setAuthorizationGrantType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.authorization_grant_type</code>.
     */
    public String getAuthorizationGrantType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.attributes</code>.
     */
    public void setAttributes(byte[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.attributes</code>.
     */
    public byte[] getAttributes() {
        return (byte[]) get(4);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.state</code>.
     */
    public void setState(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.state</code>.
     */
    public String getState() {
        return (String) get(5);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.authorization_code_value</code>.
     */
    public void setAuthorizationCodeValue(byte[] value) {
        set(6, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.authorization_code_value</code>.
     */
    public byte[] getAuthorizationCodeValue() {
        return (byte[]) get(6);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.authorization_code_issued_at</code>.
     */
    public void setAuthorizationCodeIssuedAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.authorization_code_issued_at</code>.
     */
    public LocalDateTime getAuthorizationCodeIssuedAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.authorization_code_expires_at</code>.
     */
    public void setAuthorizationCodeExpiresAt(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.authorization_code_expires_at</code>.
     */
    public LocalDateTime getAuthorizationCodeExpiresAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.authorization_code_metadata</code>.
     */
    public void setAuthorizationCodeMetadata(byte[] value) {
        set(9, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.authorization_code_metadata</code>.
     */
    public byte[] getAuthorizationCodeMetadata() {
        return (byte[]) get(9);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_value</code>.
     */
    public void setAccessTokenValue(byte[] value) {
        set(10, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_value</code>.
     */
    public byte[] getAccessTokenValue() {
        return (byte[]) get(10);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_issued_at</code>.
     */
    public void setAccessTokenIssuedAt(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_issued_at</code>.
     */
    public LocalDateTime getAccessTokenIssuedAt() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_expires_at</code>.
     */
    public void setAccessTokenExpiresAt(LocalDateTime value) {
        set(12, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_expires_at</code>.
     */
    public LocalDateTime getAccessTokenExpiresAt() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_metadata</code>.
     */
    public void setAccessTokenMetadata(byte[] value) {
        set(13, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_metadata</code>.
     */
    public byte[] getAccessTokenMetadata() {
        return (byte[]) get(13);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_type</code>.
     */
    public void setAccessTokenType(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_type</code>.
     */
    public String getAccessTokenType() {
        return (String) get(14);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.access_token_scopes</code>.
     */
    public void setAccessTokenScopes(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.access_token_scopes</code>.
     */
    public String getAccessTokenScopes() {
        return (String) get(15);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.oidc_id_token_value</code>.
     */
    public void setOidcIdTokenValue(byte[] value) {
        set(16, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.oidc_id_token_value</code>.
     */
    public byte[] getOidcIdTokenValue() {
        return (byte[]) get(16);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    public void setOidcIdTokenIssuedAt(LocalDateTime value) {
        set(17, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    public LocalDateTime getOidcIdTokenIssuedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    public void setOidcIdTokenExpiresAt(LocalDateTime value) {
        set(18, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    public LocalDateTime getOidcIdTokenExpiresAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    public void setOidcIdTokenMetadata(byte[] value) {
        set(19, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    public byte[] getOidcIdTokenMetadata() {
        return (byte[]) get(19);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.refresh_token_value</code>.
     */
    public void setRefreshTokenValue(byte[] value) {
        set(20, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.refresh_token_value</code>.
     */
    public byte[] getRefreshTokenValue() {
        return (byte[]) get(20);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.refresh_token_issued_at</code>.
     */
    public void setRefreshTokenIssuedAt(LocalDateTime value) {
        set(21, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.refresh_token_issued_at</code>.
     */
    public LocalDateTime getRefreshTokenIssuedAt() {
        return (LocalDateTime) get(21);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.refresh_token_expires_at</code>.
     */
    public void setRefreshTokenExpiresAt(LocalDateTime value) {
        set(22, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.refresh_token_expires_at</code>.
     */
    public LocalDateTime getRefreshTokenExpiresAt() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>oauth_service.oauth2_authorization.refresh_token_metadata</code>.
     */
    public void setRefreshTokenMetadata(byte[] value) {
        set(23, value);
    }

    /**
     * Getter for <code>oauth_service.oauth2_authorization.refresh_token_metadata</code>.
     */
    public byte[] getRefreshTokenMetadata() {
        return (byte[]) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Oauth2AuthorizationRecord
     */
    public Oauth2AuthorizationRecord() {
        super(Oauth2Authorization.OAUTH2_AUTHORIZATION);
    }

    /**
     * Create a detached, initialised Oauth2AuthorizationRecord
     */
    public Oauth2AuthorizationRecord(String id, String registeredClientId, String principalName, String authorizationGrantType, byte[] attributes, String state, byte[] authorizationCodeValue, LocalDateTime authorizationCodeIssuedAt, LocalDateTime authorizationCodeExpiresAt, byte[] authorizationCodeMetadata, byte[] accessTokenValue, LocalDateTime accessTokenIssuedAt, LocalDateTime accessTokenExpiresAt, byte[] accessTokenMetadata, String accessTokenType, String accessTokenScopes, byte[] oidcIdTokenValue, LocalDateTime oidcIdTokenIssuedAt, LocalDateTime oidcIdTokenExpiresAt, byte[] oidcIdTokenMetadata, byte[] refreshTokenValue, LocalDateTime refreshTokenIssuedAt, LocalDateTime refreshTokenExpiresAt, byte[] refreshTokenMetadata) {
        super(Oauth2Authorization.OAUTH2_AUTHORIZATION);

        setId(id);
        setRegisteredClientId(registeredClientId);
        setPrincipalName(principalName);
        setAuthorizationGrantType(authorizationGrantType);
        setAttributes(attributes);
        setState(state);
        setAuthorizationCodeValue(authorizationCodeValue);
        setAuthorizationCodeIssuedAt(authorizationCodeIssuedAt);
        setAuthorizationCodeExpiresAt(authorizationCodeExpiresAt);
        setAuthorizationCodeMetadata(authorizationCodeMetadata);
        setAccessTokenValue(accessTokenValue);
        setAccessTokenIssuedAt(accessTokenIssuedAt);
        setAccessTokenExpiresAt(accessTokenExpiresAt);
        setAccessTokenMetadata(accessTokenMetadata);
        setAccessTokenType(accessTokenType);
        setAccessTokenScopes(accessTokenScopes);
        setOidcIdTokenValue(oidcIdTokenValue);
        setOidcIdTokenIssuedAt(oidcIdTokenIssuedAt);
        setOidcIdTokenExpiresAt(oidcIdTokenExpiresAt);
        setOidcIdTokenMetadata(oidcIdTokenMetadata);
        setRefreshTokenValue(refreshTokenValue);
        setRefreshTokenIssuedAt(refreshTokenIssuedAt);
        setRefreshTokenExpiresAt(refreshTokenExpiresAt);
        setRefreshTokenMetadata(refreshTokenMetadata);
    }
}
