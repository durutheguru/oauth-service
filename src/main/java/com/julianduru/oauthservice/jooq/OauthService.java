/*
 * This file is generated by jOOQ.
 */
package com.julianduru.oauthservice.jooq;


import com.julianduru.oauthservice.jooq.tables.Databasechangelog;
import com.julianduru.oauthservice.jooq.tables.Databasechangeloglock;
import com.julianduru.oauthservice.jooq.tables.Oauth2Authorization;
import com.julianduru.oauthservice.jooq.tables.Oauth2AuthorizationConsent;
import com.julianduru.oauthservice.jooq.tables.Oauth2RegisteredClient;
import com.julianduru.oauthservice.jooq.tables.ResourceServer;
import com.julianduru.oauthservice.jooq.tables.ResourceServerAllowedScopes;
import com.julianduru.oauthservice.jooq.tables.UserData;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthService extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oauth_service</code>
     */
    public static final OauthService OAUTH_SERVICE = new OauthService();

    /**
     * The table <code>oauth_service.DATABASECHANGELOG</code>.
     */
    public final Databasechangelog DATABASECHANGELOG = Databasechangelog.DATABASECHANGELOG;

    /**
     * The table <code>oauth_service.DATABASECHANGELOGLOCK</code>.
     */
    public final Databasechangeloglock DATABASECHANGELOGLOCK = Databasechangeloglock.DATABASECHANGELOGLOCK;

    /**
     * The table <code>oauth_service.oauth2_authorization</code>.
     */
    public final Oauth2Authorization OAUTH2_AUTHORIZATION = Oauth2Authorization.OAUTH2_AUTHORIZATION;

    /**
     * The table <code>oauth_service.oauth2_authorization_consent</code>.
     */
    public final Oauth2AuthorizationConsent OAUTH2_AUTHORIZATION_CONSENT = Oauth2AuthorizationConsent.OAUTH2_AUTHORIZATION_CONSENT;

    /**
     * The table <code>oauth_service.oauth2_registered_client</code>.
     */
    public final Oauth2RegisteredClient OAUTH2_REGISTERED_CLIENT = Oauth2RegisteredClient.OAUTH2_REGISTERED_CLIENT;

    /**
     * The table <code>oauth_service.resource_server</code>.
     */
    public final ResourceServer RESOURCE_SERVER = ResourceServer.RESOURCE_SERVER;

    /**
     * The table <code>oauth_service.resource_server_allowed_scopes</code>.
     */
    public final ResourceServerAllowedScopes RESOURCE_SERVER_ALLOWED_SCOPES = ResourceServerAllowedScopes.RESOURCE_SERVER_ALLOWED_SCOPES;

    /**
     * The table <code>oauth_service.user_data</code>.
     */
    public final UserData USER_DATA = UserData.USER_DATA;

    /**
     * No further instances allowed
     */
    private OauthService() {
        super("oauth_service", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Databasechangelog.DATABASECHANGELOG,
            Databasechangeloglock.DATABASECHANGELOGLOCK,
            Oauth2Authorization.OAUTH2_AUTHORIZATION,
            Oauth2AuthorizationConsent.OAUTH2_AUTHORIZATION_CONSENT,
            Oauth2RegisteredClient.OAUTH2_REGISTERED_CLIENT,
            ResourceServer.RESOURCE_SERVER,
            ResourceServerAllowedScopes.RESOURCE_SERVER_ALLOWED_SCOPES,
            UserData.USER_DATA);
    }
}
