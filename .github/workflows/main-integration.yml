name: Main Branch CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Fetching All
        run: |
          git fetch --prune --unshallow

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            5.0.x

      - name: Installing GitVersion
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.3.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: Setup Java 17 env
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: zulu

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Evaluate New Artifact Version
        run: |
          NEW_VERSION=${{ steps.gitversion.outputs.semVer }}
          echo "Artifact Semantic Version: $NEW_VERSION"
          mvn versions:set -DnewVersion=${NEW_VERSION} -s settings.xml

      - name: Maven Package
        run: |
          mvn -e package -s settings.xml -f pom.xml -Dorg.jooq.skip

      - name: Login to Docker
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: |
          RELEASE_TAG=${{ steps.gitversion.outputs.semVer }}
          docker build --build-arg release_version=$RELEASE_TAG -t ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:$RELEASE_TAG .
          docker build --build-arg release_version=$RELEASE_TAG --platform linux/arm64/v8 -t ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:arm64v8-latest -t ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:arm64v8-$RELEASE_TAG .

      - name: Publish Docker image
        run: |
          RELEASE_TAG=${{ steps.gitversion.outputs.semVer }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:$RELEASE_TAG
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:arm64v8-latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/oauth-service:arm64v8-$RELEASE_TAG
          echo "Pushed Docker Images with New Release"

      - name: Upgrading Version
        run: |
          RELEASE_TAG=${{ steps.gitversion.outputs.semVer }}
          echo $RELEASE_TAG > version.ver
          ls
          git config user.email ${{ secrets.GIT_EMAIL }}
          git config user.name ${{ secrets.GIT_USERNAME }}
          git add .
          git commit -m "Upgraded Version >> $RELEASE_TAG" || true

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}


  merge-develop:
    name: Merge to Develop
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Fetching
        run: |
          git fetch --all
      - name: Merge to Develop
        uses: devmasx/merge-branch@1.4.0
        with:
          type: now
          target_branch: develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
